(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{101:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return o})),t.d(n,"toc",(function(){return c})),t.d(n,"default",(function(){return u}));var s=t(3),r=t(7),a=(t(0),t(213)),i={title:"Substrate",slug:"/blockchains/substrate"},o={unversionedId:"blockchains/blockchain-substrate",id:"blockchains/blockchain-substrate",isDocsHomePage:!1,title:"Substrate",description:"Permission Scopes",source:"@site/docs/blockchains/blockchain-substrate.md",slug:"/blockchains/substrate",permalink:"/blockchains/substrate",editUrl:"https://github.com/airgap-it/beacon-docs/edit/main/src/docs/blockchains/blockchain-substrate.md",version:"current",sidebar:"docs",previous:{title:"Usage",permalink:"/blockchains/usage"},next:{title:"Tezos",permalink:"/blockchains/tezos"}},c=[{value:"Permission Scopes",id:"permission-scopes",children:[]},{value:"Message Types",id:"message-types",children:[]},{value:"Messages",id:"messages",children:[{value:"Permission Request",id:"permission-request",children:[]},{value:"Permission Response",id:"permission-response",children:[]},{value:"Transfer Request",id:"transfer-request",children:[]},{value:"Transfer Response",id:"transfer-response",children:[]},{value:"Sign Payload Request",id:"sign-payload-request",children:[]},{value:"Sign Payload Response",id:"sign-payload-response",children:[]}]}],p={toc:c};function u(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(a.b)("wrapper",Object(s.a)({},p,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("h2",{id:"permission-scopes"},"Permission Scopes"),Object(a.b)("p",null,"The following permission scopes are available in the Substrate package."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-typescript"},'export enum SubstratePermissionScope {\n  "transfer" = "transfer",\n  "sign_payload_json" = "sign_payload_json",\n  "sign_payload_raw" = "sign_payload_raw",\n}\n')),Object(a.b)("h2",{id:"message-types"},"Message Types"),Object(a.b)("p",null,"The supported message types."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-typescript"},'export enum SubstrateMessageType {\n  "transfer_request" = "transfer_request",\n  "sign_payload_request" = "sign_payload_request",\n}\n')),Object(a.b)("h2",{id:"messages"},"Messages"),Object(a.b)("h3",{id:"permission-request"},"Permission Request"),Object(a.b)("p",null,"This message is used to request permissions to use an account."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-typescript"},'export interface SubstratePermissionRequest\n  extends PermissionRequestV3<"substrate"> {\n  blockchainData: {\n    scopes: SubstratePermissionScope[]; // enum\n    appMetadata: AppMetadata;\n    network?: {\n      genesisHash: string; // Wallet shows only those accounts\n      rpc?: string; // For development nodes?\n    }[]; // Array to "whitelist" certain networks? (optional)\n  };\n}\n')),Object(a.b)("h3",{id:"permission-response"},"Permission Response"),Object(a.b)("p",null,"This message is used to share information about an account with a dApp."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-typescript"},'export interface SubstratePermissionResponse\n  extends PermissionResponseV3<"substrate"> {\n  blockchainData: {\n    appMetadata: AppMetadata;\n    scopes: SubstratePermissionScope[]; // enum\n    accounts: {\n      accountId: string;\n      network?: {\n        genesisHash: string;\n        rpc?: string;\n      };\n      publicKey: string;\n      address: string;\n    }[];\n  };\n}\n')),Object(a.b)("h3",{id:"transfer-request"},"Transfer Request"),Object(a.b)("p",null,"This message is used to initiate a transfer between two accounts."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-typescript"},'export interface SubstrateTransferRequest\n  extends BlockchainMessage<"substrate"> {\n  blockchainData: {\n    type: SubstrateMessageType.transfer_request;\n    scope: SubstratePermissionScope.transfer;\n    sourceAddress: string;\n    amount: string;\n    recipient: string;\n    network: {\n      genesisHash: string;\n      rpc?: string;\n    };\n    mode: "submit" | "submit-and-return" | "return"; // TODO: Wording\n  };\n}\n')),Object(a.b)("h3",{id:"transfer-response"},"Transfer Response"),Object(a.b)("p",null,"This message is used to share information about a requested operation with the dApp."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-typescript"},"export type SubstrateTransferResponse =\n  | {\n      transactionHash: string;\n    }\n  | {\n      transactionHash: string;\n      signature: string;\n      payload?: string;\n    }\n  | {\n      signature: string;\n      payload?: string;\n    };\n")),Object(a.b)("h3",{id:"sign-payload-request"},"Sign Payload Request"),Object(a.b)("p",null,"This message is used to request the signature for a payload."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-typescript"},'export interface SubstrateSignPayloadRequest\n  extends BlockchainMessage<"substrate"> {\n  blockchainData: {\n    type: SubstrateMessageType.sign_payload_request;\n    scope:\n      | SubstratePermissionScope.sign_payload_json\n      | SubstratePermissionScope.sign_payload_json;\n\n    // This type is the same as the "SignerPayloadJSON" of polkadot.js https://github.com/polkadot-js/api/blob/f169ca08a80ea9c3865dc545e03e921c50f0d284/packages/types/src/types/extrinsic.ts#L32\n    payload:\n      | {\n          type: "json";\n\n          /**\n           * @description The checkpoint hash of the block, in hex\n           */\n          blockHash: string;\n\n          /**\n           * @description The checkpoint block number, in hex\n           */\n          blockNumber: string;\n\n          /**\n           * @description The era for this transaction, in hex\n           */\n          era: string;\n\n          /**\n           * @description The genesis hash of the chain, in hex\n           */\n          genesisHash: string;\n\n          /**\n           * @description The encoded method (with arguments) in hex\n           */\n          method: string;\n\n          /**\n           * @description The nonce for this transaction, in hex\n           */\n          nonce: string;\n\n          /**\n           * @description The current spec version for the runtime\n           */\n          specVersion: string;\n\n          /**\n           * @description The tip for this transaction, in hex\n           */\n          tip: string;\n\n          /**\n           * @description The current transaction version for the runtime\n           */\n          transactionVersion: string;\n\n          /**\n           * @description The applicable signed extensions for this runtime\n           */\n          signedExtensions: string[];\n\n          /**\n           * @description The version of the extrinsic we are dealing with\n           */\n          version: number;\n        }\n      | {\n          type: "raw";\n          isMutable: boolean;\n          dataType: "bytes" | "payload";\n          data: string;\n        };\n\n    mode: "submit" | "submit-and-return" | "return";\n  };\n}\n')),Object(a.b)("h3",{id:"sign-payload-response"},"Sign Payload Response"),Object(a.b)("p",null,"This message is used to share information about a requested signature with the dApp."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-typescript"},"export type SubstrateSignPayloadResponse =\n  | {\n      transactionHash: string;\n    }\n  | {\n      transactionHash: string;\n      signature: string;\n      payload?: string;\n    }\n  | {\n      signature: string;\n      payload?: string;\n    };\n")))}u.isMDXComponent=!0},213:function(e,n,t){"use strict";t.d(n,"a",(function(){return l})),t.d(n,"b",(function(){return g}));var s=t(0),r=t.n(s);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);n&&(s=s.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,s)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,s,r=function(e,n){if(null==e)return{};var t,s,r={},a=Object.keys(e);for(s=0;s<a.length;s++)t=a[s],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(s=0;s<a.length;s++)t=a[s],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=r.a.createContext({}),u=function(e){var n=r.a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},l=function(e){var n=u(e.components);return r.a.createElement(p.Provider,{value:n},e.children)},b={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},d=r.a.forwardRef((function(e,n){var t=e.components,s=e.mdxType,a=e.originalType,i=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),l=u(t),d=s,g=l["".concat(i,".").concat(d)]||l[d]||b[d]||a;return t?r.a.createElement(g,o(o({ref:n},p),{},{components:t})):r.a.createElement(g,o({ref:n},p))}));function g(e,n){var t=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var a=t.length,i=new Array(a);i[0]=d;var o={};for(var c in n)hasOwnProperty.call(n,c)&&(o[c]=n[c]);o.originalType=e,o.mdxType="string"==typeof e?e:s,i[1]=o;for(var p=2;p<a;p++)i[p]=t[p];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,t)}d.displayName="MDXCreateElement"}}]);