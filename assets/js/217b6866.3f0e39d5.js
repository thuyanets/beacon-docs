(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{213:function(e,n,t){"use strict";t.d(n,"a",(function(){return p})),t.d(n,"b",(function(){return m}));var r=t(0),a=t.n(r);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function c(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?c(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):c(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=a.a.createContext({}),u=function(e){var n=a.a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},p=function(e){var n=u(e.components);return a.a.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},b=a.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),p=u(t),b=r,m=p["".concat(c,".").concat(b)]||p[b]||d[b]||o;return t?a.a.createElement(m,s(s({ref:n},l),{},{components:t})):a.a.createElement(m,s({ref:n},l))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,c=new Array(o);c[0]=b;var s={};for(var i in n)hasOwnProperty.call(n,i)&&(s[i]=n[i]);s.originalType=e,s.mdxType="string"==typeof e?e:r,c[1]=s;for(var l=2;l<o;l++)c[l]=t[l];return a.a.createElement.apply(null,c)}return a.a.createElement.apply(null,t)}b.displayName="MDXCreateElement"},219:function(e,n,t){"use strict";function r(e){var n,t,a="";if("string"==typeof e||"number"==typeof e)a+=e;else if("object"==typeof e)if(Array.isArray(e))for(n=0;n<e.length;n++)e[n]&&(t=r(e[n]))&&(a&&(a+=" "),a+=t);else for(n in e)e[n]&&(a&&(a+=" "),a+=n);return a}n.a=function(){for(var e,n,t=0,a="";t<arguments.length;)(e=arguments[t++])&&(n=r(e))&&(a&&(a+=" "),a+=n);return a}},229:function(e,n,t){"use strict";var r=t(0),a=t.n(r),o=t(234),c=t(219),s=t(57),i=t.n(s);var l=37,u=39;n.a=function(e){var n=e.lazy,t=e.block,s=e.defaultValue,p=e.values,d=e.groupId,b=e.className,m=Object(o.a)(),f=m.tabGroupChoices,g=m.setTabGroupChoices,h=Object(r.useState)(s),v=h[0],O=h[1],y=r.Children.toArray(e.children),w=[];if(null!=d){var j=f[d];null!=j&&j!==v&&p.some((function(e){return e.value===j}))&&O(j)}var k=function(e){var n=e.target,t=w.indexOf(n),r=y[t].props.value;O(r),null!=d&&(g(d,r),setTimeout((function(){var e,t,r,a,o,c,s,l;(e=n.getBoundingClientRect(),t=e.top,r=e.left,a=e.bottom,o=e.right,c=window,s=c.innerHeight,l=c.innerWidth,t>=0&&o<=l&&a<=s&&r>=0)||(n.scrollIntoView({block:"center",behavior:"smooth"}),n.classList.add(i.a.tabItemActive),setTimeout((function(){return n.classList.remove(i.a.tabItemActive)}),2e3))}),150))},T=function(e){var n,t;switch(e.keyCode){case u:var r=w.indexOf(e.target)+1;t=w[r]||w[0];break;case l:var a=w.indexOf(e.target)-1;t=w[a]||w[w.length-1]}null===(n=t)||void 0===n||n.focus()};return a.a.createElement("div",{className:"tabs-container"},a.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(c.a)("tabs",{"tabs--block":t},b)},p.map((function(e){var n=e.value,t=e.label;return a.a.createElement("li",{role:"tab",tabIndex:v===n?0:-1,"aria-selected":v===n,className:Object(c.a)("tabs__item",i.a.tabItem,{"tabs__item--active":v===n}),key:n,ref:function(e){return w.push(e)},onKeyDown:T,onFocus:k,onClick:k},t)}))),n?Object(r.cloneElement)(y.filter((function(e){return e.props.value===v}))[0],{className:"margin-vert--md"}):a.a.createElement("div",{className:"margin-vert--md"},y.map((function(e,n){return Object(r.cloneElement)(e,{key:n,hidden:e.props.value!==v})}))))}},230:function(e,n,t){"use strict";var r=t(0),a=t.n(r);n.a=function(e){var n=e.children,t=e.hidden,r=e.className;return a.a.createElement("div",{role:"tabpanel",hidden:t,className:r},n)}},234:function(e,n,t){"use strict";var r=t(0),a=t(251);n.a=function(){var e=Object(r.useContext)(a.a);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},251:function(e,n,t){"use strict";var r=t(0),a=Object(r.createContext)(void 0);n.a=a},287:function(e,n,t){"use strict";var r=t(0),a=t.n(r),o=t(219),c=t(59),s=t.n(c);function i(e){var n=e.toc,t=e.isChild;return n.length?a.a.createElement("ul",{className:t?"":"table-of-contents"},n.map((function(e){return a.a.createElement("li",{key:e.id},a.a.createElement("a",{href:"#"+e.id,dangerouslySetInnerHTML:{__html:e.value}}),a.a.createElement(i,{isChild:!0,toc:e.children}))}))):null}n.a=function(e){var n=e.toc;return a.a.createElement("div",{className:Object(o.a)(s.a.tableOfContentsInline)},a.a.createElement(i,{toc:n}))}},95:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return l})),t.d(n,"metadata",(function(){return u})),t.d(n,"toc",(function(){return p})),t.d(n,"default",(function(){return b}));var r=t(3),a=t(7),o=(t(0),t(213)),c=t(229),s=t(230),i=t(287),l={title:"Disconnect from a dApp"},u={unversionedId:"wallet/getting-started/ios/disconnect-from-dapp",id:"wallet/getting-started/ios/disconnect-from-dapp",isDocsHomePage:!1,title:"Disconnect from a dApp",description:"This guide is a continuation of Connect to a dApp and may assume that certain code components have been defined.",source:"@site/docs/wallet/getting-started/ios/disconnect-from-dapp.mdx",slug:"/wallet/getting-started/ios/disconnect-from-dapp",permalink:"/wallet/getting-started/ios/disconnect-from-dapp",editUrl:"https://github.com/airgap-it/beacon-docs/edit/main/src/docs/wallet/getting-started/ios/disconnect-from-dapp.mdx",version:"current",sidebar:"wallet",previous:{title:"Connect to a dApp",permalink:"/wallet/getting-started/ios/connect-to-dapp"},next:{title:"Configuration",permalink:"/wallet/advanced/android/configuration"}},p=[{value:"Disconnect from a dApp",id:"disconnect-from-a-dapp",children:[]},{value:"Disconnect from all dApps",id:"disconnect-from-all-dapps",children:[]},{value:"Example Code",id:"example-code",children:[]}],d={toc:p};function b(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},d,t,{components:n,mdxType:"MDXLayout"}),Object(o.b)(i.a,{toc:p,mdxType:"TOCInline"}),Object(o.b)("div",{className:"admonition admonition-info alert alert--info"},Object(o.b)("div",{parentName:"div",className:"admonition-heading"},Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",{parentName:"h5",className:"admonition-icon"},Object(o.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},Object(o.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),Object(o.b)("div",{parentName:"div",className:"admonition-content"},Object(o.b)("p",{parentName:"div"},"This guide is a continuation of ",Object(o.b)("a",{parentName:"p",href:"connect-to-dapp"},"Connect to a dApp")," and may assume that certain code components have been defined."))),Object(o.b)("h2",{id:"disconnect-from-a-dapp"},"Disconnect from a dApp"),Object(o.b)("p",null,"To disconnect form a subscribed dApp remove its peer entry from the client."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-swift"},'beaconWallet.getPeers { result in\n    guard case let .success(peers) = result else {\n        return\n    }\n\n    guard let dApp = peers.first(where: { $0.name == "MyApp" }) else {\n        return\n    }\n\n    beaconWallet.remove([dApp]) { result in\n        guard case .success(_) = result else {\n            return\n        }\n    }\n}\n')),Object(o.b)("h2",{id:"disconnect-from-all-dapps"},"Disconnect from all dApps"),Object(o.b)("p",null,"To disconnect from all subscribed dApps remove all peers that were previously registered in the client."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-swift"},"beaconWallet.removeAllPeers { result in\n    guard case .success(_) = result else {\n        return\n    }\n}\n")),Object(o.b)("h2",{id:"example-code"},"Example Code"),Object(o.b)("p",null,"The following example extends the code presented in the ",Object(o.b)("a",{parentName:"p",href:"connect-to-dapp#ExampleCode"},"Connect to a dApp")," guide. The example class listens for incoming requests from a dApp, waits 1s and cancels connection."),Object(o.b)("p",null,Object(o.b)("a",{parentName:"p",href:"https://github.com/airgap-it/beacon-ios-sdk"},Object(o.b)("img",{parentName:"a",src:"https://img.shields.io/github/v/tag/airgap-it/beacon-ios-sdk?label=stable&sort=semver",alt:"stable"})),"\n",Object(o.b)("a",{parentName:"p",href:"https://github.com/airgap-it/beacon-ios-sdk"},Object(o.b)("img",{parentName:"a",src:"https://img.shields.io/github/v/tag/airgap-it/beacon-ios-sdk?color=orange&include_prereleases&label=latest",alt:"latest"}))),Object(o.b)(c.a,{groupId:"package-manager",defaultValue:"spm",values:[{label:"SPM",value:"spm"},{label:"CocoaPods",value:"cocoapods"}],mdxType:"Tabs"},Object(o.b)(s.a,{value:"spm",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-swift",metastring:'title="Package.swift"',title:'"Package.swift"'},'dependencies: [\n    .package(url: "https://github.com/airgap-it/beacon-ios-sdk", from: "x.y.z")\n],\n')),Object(o.b)("p",null,"Or in Xcode open the ",Object(o.b)("inlineCode",{parentName:"p"},"Add Package Dependency")," window (as described in ",Object(o.b)("a",{parentName:"p",href:"https://developer.apple.com/documentation/xcode/adding_package_dependencies_to_your_app"},"the official guide"),") and enter the ",Object(o.b)("inlineCode",{parentName:"p"},"Beacon iOS SDK")," GitHub repository URL"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"https://github.com/airgap-it/beacon-ios-sdk\n"))),Object(o.b)(s.a,{value:"cocoapods",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ruby",metastring:'title="Podfile"',title:'"Podfile"'},"target 'MyTarget' do\n    use_frameworks!\n\n    pod 'BeaconCore', :git => 'https://github.com/airgap-it/beacon-ios-sdk', :tag => 'x.y.z'\n    pod 'BeaconClientWallet', :git => 'https://github.com/airgap-it/beacon-ios-sdk', :tag => 'x.y.z'\n    pod 'BeaconBlockchainSubstrate', :git => 'https://github.com/airgap-it/beacon-ios-sdk', :tag => 'x.y.z'\n    pod 'BeaconBlockchainTezos', :git => 'https://github.com/airgap-it/beacon-ios-sdk', :tag => 'x.y.z'\n    pod 'BeaconTransportP2PMatrix', :git => 'https://github.com/airgap-it/beacon-ios-sdk', :tag => 'x.y.z'\nend\n")))),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-swift",metastring:'title="BeaconExample.swift"',title:'"BeaconExample.swift"'},'import Foundation\nimport BeaconCore\nimport BeaconBlockchainSubstrate\nimport BeaconBlockchainTezos\nimport BeaconClientWallet\nimport BeaconTransportP2PMatrix\n\nclass BeaconExample {\n    var beaconWallet: Beacon.WalletClient!\n\n    let dApp = Beacon.P2PPeer(\n        id: "0b02d44c-de33-b5ab-7730-ff8e62f61869" /* TODO: change me */,,\n        name: "My dApp",\n        publicKey: "6c7870aa1e42477fd7c2baaf4763bd826971e470772f71a0a388c1763de3ea1e" /* TODO: change me */,\n        relayServer: "beacon-node-1.sky.papers.tech" /* TODO: change me */,\n        version: "2" /* TODO: change me */\n    )\n\n    func substrateAccount(network: Substrate.Network) throws -> Substrate.Account {\n        try Substrate.Account(\n            publicKey: "f4c6095213a2f6d09464ed882b12d6024d20f7170c3b8bd5c1b071e4b00ced72" /* TODO: change me */,\n            address: "16XwWkdUqFXFY1tJNf1Q6fGgxQnGYUS6M95wPcrbp2sjjuoC" /* TODO: change me */,\n            network: network\n        )\n    }\n\n    func tezosAccount(network: Tezos.Network) throws -> Tezos.Account {\n        try Tezos.Network(\n            publicKey: "9ae0875d510904b0b15d251d8def1f5f3353e9799841c0ed6d7ac718f04459a0" /* TODO: change me */,\n            address: "tz1SkbBZg15BXPRkYCrSzhY6rq4tKGtpUSWv" /* TODO: change me */,\n            network: network\n        )\n    }\n\n    func run() {\n        createBeaconWallet { result in\n            guard case .success(_) = result else {\n                return\n            }\n\n            self.subscribeToRequests { result in\n                guard case .success(_) = result else {\n                    return\n                }\n\n                self.connectToDApp { result in\n                    guard case .success(_) = result else {\n                        return\n                    }\n                }\n            }\n        }\n    }\n\n    func createBeaconWallet(completion: @escaping (Result<(), Error>) -> ()) {\n        do {\n            Beacon.WalletClient.create(\n                with: .init(\n                    name: "MyApp",\n                    blockchains: [Substrate.factory, Tezos.factory],\n                    connections: [try Transport.P2P.Matrix.connection()]\n                )\n            ) { result in\n                switch result {\n                case let .success(client):\n                    self.beaconWallet = client\n                    completion(.success(()))\n                case let .failure(error):\n                    completion(.failure(error))\n                }\n            }\n        } catch {\n            completion(.failure(error))\n        }\n    }\n\n    func subscribeToRequests(completion: @escaping (Result<(), Error>) -> ()) {\n        beaconWallet.connect { result in\n            switch result {\n            case .success(_):\n                self.beaconWallet.listen(onRequest: self.onSubstrateRequest)\n                self.beaconWallet.listen(onRequest: self.onTezosRequest)\n                completion(.success(()))\n            case let .failure(error):\n                completion(.failure(error))\n            }\n        }\n    }\n\n    func connectToDApp(completion: @escaping (Result<(), Error>) -> ()) {\n        beaconWallet.add([.p2p(dApp)]) { result in\n            switch result {\n            case .success(_):\n                completion(.success(()))\n            case let .failure(error):\n                completion(.failure(error))\n            }\n        }\n    }\n\n    func onSubstrateRequest(_ request: Result<BeaconRequest<Substrate>, Beacon.Error>) {\n        do {\n            let request = try request.get()\n            let response = try response(from: request)\n\n            beaconWallet.respond(with: response) { result in\n                switch result {\n                case .success(_):\n                    print("Response sent")\n                    DispatchQueue.main.asyncAfter(deadline: .now() + 1.0) {\n                        // highlight-start\n                        self.beaconWallet.remove([.p2p(self.dApp)]) { result in\n                        // highlight-end\n                            switch result {\n                            case .success(_):\n                                print("Disconnected")\n                            case let .failure(error):\n                                print(error)\n                            }\n                        }\n                    }\n                case let .failure(error):\n                    print(error)\n                }\n            }\n        } catch {\n            print(error)\n        }\n    }\n\n    func response(from request: BeaconRequest<Substrate>) throws -> BeaconResponse<Substrate> {\n        switch request {\n        case let .permission(content):\n            let accounts = try content.networks.map { try substrateAccount(network: $0) }\n            return .permission(PermissionSubstrateResponse(from: content, accounts: accounts))\n        case let .blockchain(blockchain):\n            return .error(ErrorBeaconResponse(from: blockchain, errorType: .aborted))\n        }\n    }\n\n    func onTezosRequest(_ request: Result<BeaconRequest<Tezos>, Beacon.Error>) {\n        do {\n            let request = try request.get()\n            let response = try response(from: request)\n\n            beaconWallet.respond(with: response) { result in\n                switch result {\n                case .success(_):\n                    print("Response sent")\n                    DispatchQueue.main.asyncAfter(deadline: .now() + 1.0) {\n                        // highlight-start\n                        self.beaconWallet.remove([.p2p(self.dApp)]) { result in\n                        // highlight-end\n                            switch result {\n                            case .success(_):\n                                print("Disconnected")\n                            case let .failure(error):\n                                print(error)\n                            }\n                        }\n                    }\n                case let .failure(error):\n                    print(error)\n                }\n            }\n        } catch {\n            print(error)\n        }\n    }\n\n    func response(from request: BeaconRequest<Tezos>) throws -> BeaconResponse<Tezos> {\n        switch request {\n        case let .permission(content):\n            let account = try tezosAccount(network: content.network)\n            return .permission(PermissionTezosResponse(from: content, account: account))\n        case let .blockchain(blockchain):\n            return .error(ErrorBeaconResponse(from: blockchain, errorType: .aborted))\n        }\n    }\n}\n')))}b.isMDXComponent=!0}}]);