(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{213:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return h}));var a=n(0),r=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=r.a.createContext({}),u=function(e){var t=r.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},p=function(e){var t=u(e.components);return r.a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},b=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),p=u(n),b=a,h=p["".concat(s,".").concat(b)]||p[b]||d[b]||o;return n?r.a.createElement(h,c(c({ref:t},l),{},{components:n})):r.a.createElement(h,c({ref:t},l))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=b;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=e,c.mdxType="string"==typeof e?e:a,s[1]=c;for(var l=2;l<o;l++)s[l]=n[l];return r.a.createElement.apply(null,s)}return r.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"},219:function(e,t,n){"use strict";function a(e){var t,n,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=a(e[t]))&&(r&&(r+=" "),r+=n);else for(t in e)e[t]&&(r&&(r+=" "),r+=t);return r}t.a=function(){for(var e,t,n=0,r="";n<arguments.length;)(e=arguments[n++])&&(t=a(e))&&(r&&(r+=" "),r+=t);return r}},229:function(e,t,n){"use strict";var a=n(0),r=n.n(a),o=n(234),s=n(219),c=n(57),i=n.n(c);var l=37,u=39;t.a=function(e){var t=e.lazy,n=e.block,c=e.defaultValue,p=e.values,d=e.groupId,b=e.className,h=Object(o.a)(),m=h.tabGroupChoices,g=h.setTabGroupChoices,f=Object(a.useState)(c),w=f[0],O=f[1],v=a.Children.toArray(e.children),y=[];if(null!=d){var j=m[d];null!=j&&j!==w&&p.some((function(e){return e.value===j}))&&O(j)}var k=function(e){var t=e.target,n=y.indexOf(t),a=v[n].props.value;O(a),null!=d&&(g(d,a),setTimeout((function(){var e,n,a,r,o,s,c,l;(e=t.getBoundingClientRect(),n=e.top,a=e.left,r=e.bottom,o=e.right,s=window,c=s.innerHeight,l=s.innerWidth,n>=0&&o<=l&&r<=c&&a>=0)||(t.scrollIntoView({block:"center",behavior:"smooth"}),t.classList.add(i.a.tabItemActive),setTimeout((function(){return t.classList.remove(i.a.tabItemActive)}),2e3))}),150))},B=function(e){var t,n;switch(e.keyCode){case u:var a=y.indexOf(e.target)+1;n=y[a]||y[0];break;case l:var r=y.indexOf(e.target)-1;n=y[r]||y[y.length-1]}null===(t=n)||void 0===t||t.focus()};return r.a.createElement("div",{className:"tabs-container"},r.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(s.a)("tabs",{"tabs--block":n},b)},p.map((function(e){var t=e.value,n=e.label;return r.a.createElement("li",{role:"tab",tabIndex:w===t?0:-1,"aria-selected":w===t,className:Object(s.a)("tabs__item",i.a.tabItem,{"tabs__item--active":w===t}),key:t,ref:function(e){return y.push(e)},onKeyDown:B,onFocus:k,onClick:k},n)}))),t?Object(a.cloneElement)(v.filter((function(e){return e.props.value===w}))[0],{className:"margin-vert--md"}):r.a.createElement("div",{className:"margin-vert--md"},v.map((function(e,t){return Object(a.cloneElement)(e,{key:t,hidden:e.props.value!==w})}))))}},230:function(e,t,n){"use strict";var a=n(0),r=n.n(a);t.a=function(e){var t=e.children,n=e.hidden,a=e.className;return r.a.createElement("div",{role:"tabpanel",hidden:n,className:a},t)}},234:function(e,t,n){"use strict";var a=n(0),r=n(251);t.a=function(){var e=Object(a.useContext)(r.a);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},251:function(e,t,n){"use strict";var a=n(0),r=Object(a.createContext)(void 0);t.a=r},287:function(e,t,n){"use strict";var a=n(0),r=n.n(a),o=n(219),s=n(59),c=n.n(s);function i(e){var t=e.toc,n=e.isChild;return t.length?r.a.createElement("ul",{className:n?"":"table-of-contents"},t.map((function(e){return r.a.createElement("li",{key:e.id},r.a.createElement("a",{href:"#"+e.id,dangerouslySetInnerHTML:{__html:e.value}}),r.a.createElement(i,{isChild:!0,toc:e.children}))}))):null}t.a=function(e){var t=e.toc;return r.a.createElement("div",{className:Object(o.a)(c.a.tableOfContentsInline)},r.a.createElement(i,{toc:t}))}},96:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return l})),n.d(t,"metadata",(function(){return u})),n.d(t,"toc",(function(){return p})),n.d(t,"default",(function(){return b}));var a=n(3),r=n(7),o=(n(0),n(213)),s=n(229),c=n(230),i=n(287),l={title:"Connect to a dApp"},u={unversionedId:"wallet/getting-started/ios/connect-to-dapp",id:"wallet/getting-started/ios/connect-to-dapp",isDocsHomePage:!1,title:"Connect to a dApp",description:"Requirements",source:"@site/docs/wallet/getting-started/ios/connect-to-dapp.mdx",slug:"/wallet/getting-started/ios/connect-to-dapp",permalink:"/wallet/getting-started/ios/connect-to-dapp",editUrl:"https://github.com/airgap-it/beacon-docs/edit/main/src/docs/wallet/getting-started/ios/connect-to-dapp.mdx",version:"current",sidebar:"wallet",previous:{title:"Installation",permalink:"/wallet/getting-started/ios/installation"},next:{title:"Disconnect from a dApp",permalink:"/wallet/getting-started/ios/disconnect-from-dapp"}},p=[{value:"Requirements",id:"requirements",children:[]},{value:"How to listen for messages and respond",id:"how-to-listen-for-messages-and-respond",children:[{value:"Create a wallet client",id:"create-a-wallet-client",children:[]},{value:"Subscribe to incoming requests",id:"subscribe-to-incoming-requests",children:[]},{value:"Connect to a dApp",id:"connect-to-a-dapp",children:[]},{value:"Handle requests from the dApp",id:"handle-requests-from-the-dapp",children:[]}]},{value:"Example Code",id:"example-code",children:[]}],d={toc:p};function b(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},d,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)(i.a,{toc:p,mdxType:"TOCInline"}),Object(o.b)("h2",{id:"requirements"},"Requirements"),Object(o.b)("p",null,"Make sure you have added the following packages as your dependencies:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"BeaconCore\nBeaconClientWallet\n")),Object(o.b)("p",null,"You should have also decided which blockchains will be supported in your application and what transport layers to use to establish the communication. Make sure you have added the appropriate ",Object(o.b)("a",{parentName:"p",href:"installation#blockchain"},"Blockchain")," and ",Object(o.b)("a",{parentName:"p",href:"installation#transport"},"Transport")," packages as your dependencies as well."),Object(o.b)("div",{className:"admonition admonition-tip alert alert--success"},Object(o.b)("div",{parentName:"div",className:"admonition-heading"},Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",{parentName:"h5",className:"admonition-icon"},Object(o.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},Object(o.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),Object(o.b)("div",{parentName:"div",className:"admonition-content"},Object(o.b)("p",{parentName:"div"},"See the ",Object(o.b)("a",{parentName:"p",href:"installation"},"Installation")," page for more information about the packages and how to install them."))),Object(o.b)("h2",{id:"how-to-listen-for-messages-and-respond"},"How to listen for messages and respond"),Object(o.b)("p",null,"Follow the steps below to learn how to interact with a dApp. The guide assumes all blockchains and transport layers are supported."),Object(o.b)("h3",{id:"create-a-wallet-client"},"Create a wallet client"),Object(o.b)("p",null,"Create a ",Object(o.b)("inlineCode",{parentName:"p"},"Beacon.WalletClient")," instance by providing your app's name, registering supported blockchains and transport layers that will be used for communication."),Object(o.b)("p",null,"The example below creates a new ",Object(o.b)("inlineCode",{parentName:"p"},"Beacon.WalletClient")," instance with default settings. See the ",Object(o.b)("a",{parentName:"p",href:"/wallet/advanced/ios/configuration"},"Configuration")," guide to learn about more advanced setups."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-swift"},'import BeaconCore\nimport BeaconBlockchainSubstrate\nimport BeaconBlockchainTezos\nimport BeaconClientWallet\nimport BeaconTransportP2PMatrix\n\n...\n\nvar beaconWallet: Beacon.WalletClient!\n\ndo {\n    // highlight-start\n    Beacon.WalletClient.create(\n        with: .init(\n            name: "MyApp",\n            blockchains: [Substrate.factory, Tezos.factory], // set support for Substrate and Tezos blockchains\n            connections: [try Transport.P2P.Matrix.connection()] // use Matrix to communicate with the Beacon network\n        )\n    ) { result in\n    // highlight-end\n        switch result {\n        case let .success(client):\n            beaconWallet = client\n        case let .failure(error):\n            print(error)\n        }\n    }\n} catch {\n    print(error)\n}\n')),Object(o.b)("div",{className:"admonition admonition-caution alert alert--warning"},Object(o.b)("div",{parentName:"div",className:"admonition-heading"},Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",{parentName:"h5",className:"admonition-icon"},Object(o.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},Object(o.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),Object(o.b)("div",{parentName:"div",className:"admonition-content"},Object(o.b)("p",{parentName:"div"},"Currently only one instance of ",Object(o.b)("inlineCode",{parentName:"p"},"Beacon.WalletClient")," should be created per application."))),Object(o.b)("h3",{id:"subscribe-to-incoming-requests"},"Subscribe to incoming requests"),Object(o.b)("p",null,"Subscribe to requests from the dApp by connecting to the Beacon network and listening to incoming requests."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-swift"},"import BeaconCore\nimport BeaconBlockchainSubstrate\nimport BeaconBlockchainTezos\nimport BeaconClientWallet\n\n...\n\n// highlight-start\nbeaconWallet.connect { result in\n// highlight-end\n    switch result {\n    case .success(_):\n        // highlight-start\n        beaconWallet.listen(onRequest: onSubstrateRequest) // listen for Substrate requests\n        beaconWallet.listen(onRequest: onTezosRequest) // listen for Tezos requests\n        // highlight-end\n    case let .failure(error):\n        print(error)\n    }\n}\n\n...\n\nfunc onSubstrateRequest(_ request: Result<BeaconRequest<Substrate>, Beacon.Error>) {\n    // TODO: Not yet implemented\n}\n\nfunc onTezosRequest(_ request: Result<BeaconRequest<Tezos>, Beacon.Error>) {\n    // TODO: Not yet implemented\n}\n")),Object(o.b)("h3",{id:"connect-to-a-dapp"},"Connect to a dApp"),Object(o.b)("p",null,"To connect to a new dApp take the pairing request (obtained from, for example, a paring QR code) and transform it to ",Object(o.b)("inlineCode",{parentName:"p"},"Beacon.P2PPeer"),". Next, register the new instance of ",Object(o.b)("inlineCode",{parentName:"p"},"Beacon.P2PPeer")," in your wallet client."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-swift"},'import BeaconCore\nimport BeaconClientWallet\n\n// highlight-start\n// replace placeholder values with data provided in the dApp\'s pairing request\nlet dApp = Beacon.P2PPeer(\n    id: "id",\n    name: "name",\n    publicKey: "publicKey",\n    relayServer: "relayServer",\n    version: "version"\n)\n// highlight-end\n\n// highlight-start\n// connect to a new peer\nbeaconWallet.add([.p2p(dApp)]) { result in\n// highlight-end\n    switch result {\n        case .success(_):\n            print("dApp connected")\n        case let .failure(error):\n            print(error)\n    }\n}\n')),Object(o.b)("h3",{id:"handle-requests-from-the-dapp"},"Handle requests from the dApp"),Object(o.b)("p",null,"Having received a request, you can create a response and send it back to the dApp. The response should ",Object(o.b)("em",{parentName:"p"},"always")," be created from an incoming request. Attempting to send a response that was not created from a request awaiting answer will result in an error."),Object(o.b)("p",null,"The first request your app receives from a dApp is a permission request. The example below shows how to respond to it in the most basic way. To get more information about other kinds of requests or learn more advanced use cases see the Blockchain "," guides."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-swift"},'import BeaconCore\nimport BeaconBlockchainSubstrate\nimport BeaconBlockchainTezos\nimport BeaconClientWallet\n\nfunc onSubstrateRequest(_ request: Result<BeaconRequest<Substrate>, Beacon.Error>) {\n    do {\n        let request = try request.get()\n        let response = try response(from: request)\n\n        // highlight-start\n        beaconWallet.respond(with: response) { result in\n        // highlight-end\n            switch result {\n            case .success(_):\n                print("Response sent")\n            case let .failure(error):\n                print(error)\n            }\n        }\n    } catch {\n        print(error)\n    }\n}\n\nfunc response(from request: BeaconRequest<Substrate>) throws -> BeaconResponse<Substrate> {\n    // highlight-start\n    switch request {\n    case let .permission(content):\n        let accounts = try content.networks.map { try substrateAccount(network: $0) }\n        return .permission(PermissionSubstrateResponse(from: content, accounts: accounts))\n    case let .blockchain(blockchain):\n        return .error(ErrorBeaconResponse(from: blockchain, errorType: .aborted))\n    }\n    // highlight-end\n}\n\nfunc onTezosRequest(_ request: Result<BeaconRequest<Tezos>, Beacon.Error>) {\n    do {\n        let request = try request.get()\n        let response = try response(from: request)\n\n        // highlight-start\n        beaconWallet.respond(with: response) { result in\n        // highlight-end\n            switch result {\n            case .success(_):\n                print("Response sent")\n            case let .failure(error):\n                print(error)\n            }\n        }\n    } catch {\n        print(error)\n    }\n}\n\nfunc response(from request: BeaconRequest<Tezos>) throws -> BeaconResponse<Tezos> {\n    // highlight-start\n    switch request {\n    case let .permission(content):\n        let account = try tezosAccount(network: content.network)\n        return .permission(PermissionTezosResponse(from: content, account: account))\n    case let .blockchain(blockchain):\n        return .error(ErrorBeaconResponse(from: blockchain, errorType: .aborted))\n    }\n    // highlight-end\n}\n\n// replace placeholder values with valid data\nfunc substrateAccount(network: Substrate.Network) throws -> Substrate.Account {\n    try Substrate.Account(\n        publicKey: "substratePublicKey",\n        address: "substrateAddress",\n        network: network\n    )\n}\n\nfunc tezosAccount(network: Tezos.Network) throws -> Tezos.Account {\n    try Tezos.Network(\n        publicKey: "tezosPublicKey",\n        address: "tezosAddress",\n        network: network\n    )\n}\n')),Object(o.b)("h2",{id:"example-code"},"Example Code"),Object(o.b)("p",null,"The following example shows how to create a simple class which connects to a dApp using ",Object(o.b)("a",{parentName:"p",href:"https://matrix.org/"},"Matrix")," and handles ",Object(o.b)("a",{parentName:"p",href:"https://substrate.io/"},"Substrate")," and ",Object(o.b)("a",{parentName:"p",href:"https://tezos.com/"},"Tezos")," messages based on the steps described earlier."),Object(o.b)("p",null,Object(o.b)("a",{parentName:"p",href:"https://github.com/airgap-it/beacon-ios-sdk"},Object(o.b)("img",{parentName:"a",src:"https://img.shields.io/github/v/tag/airgap-it/beacon-ios-sdk?label=stable&sort=semver",alt:"stable"})),"\n",Object(o.b)("a",{parentName:"p",href:"https://github.com/airgap-it/beacon-ios-sdk"},Object(o.b)("img",{parentName:"a",src:"https://img.shields.io/github/v/tag/airgap-it/beacon-ios-sdk?color=orange&include_prereleases&label=latest",alt:"latest"}))),Object(o.b)(s.a,{groupId:"package-manager",defaultValue:"spm",values:[{label:"SPM",value:"spm"},{label:"CocoaPods",value:"cocoapods"}],mdxType:"Tabs"},Object(o.b)(c.a,{value:"spm",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-swift",metastring:'title="Package.swift"',title:'"Package.swift"'},'dependencies: [\n    .package(url: "https://github.com/airgap-it/beacon-ios-sdk", from: "x.y.z")\n],\n')),Object(o.b)("p",null,"Or in Xcode open the ",Object(o.b)("inlineCode",{parentName:"p"},"Add Package Dependency")," window (as described in ",Object(o.b)("a",{parentName:"p",href:"https://developer.apple.com/documentation/xcode/adding_package_dependencies_to_your_app"},"the official guide"),") and enter the ",Object(o.b)("inlineCode",{parentName:"p"},"Beacon iOS SDK")," GitHub repository URL"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"https://github.com/airgap-it/beacon-ios-sdk\n"))),Object(o.b)(c.a,{value:"cocoapods",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ruby",metastring:'title="Podfile"',title:'"Podfile"'},"target 'MyTarget' do\n    use_frameworks!\n\n    pod 'BeaconCore', :git => 'https://github.com/airgap-it/beacon-ios-sdk', :tag => 'x.y.z'\n    pod 'BeaconClientWallet', :git => 'https://github.com/airgap-it/beacon-ios-sdk', :tag => 'x.y.z'\n    pod 'BeaconBlockchainSubstrate', :git => 'https://github.com/airgap-it/beacon-ios-sdk', :tag => 'x.y.z'\n    pod 'BeaconBlockchainTezos', :git => 'https://github.com/airgap-it/beacon-ios-sdk', :tag => 'x.y.z'\n    pod 'BeaconTransportP2PMatrix', :git => 'https://github.com/airgap-it/beacon-ios-sdk', :tag => 'x.y.z'\nend\n")))),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-swift",metastring:'title="BeaconExample.swift"',title:'"BeaconExample.swift"'},'import Foundation\nimport BeaconCore\nimport BeaconBlockchainSubstrate\nimport BeaconBlockchainTezos\nimport BeaconClientWallet\nimport BeaconTransportP2PMatrix\n\nclass BeaconExample {\n    var beaconWallet: Beacon.WalletClient!\n\n    let dApp = Beacon.P2PPeer(\n        id: "0b02d44c-de33-b5ab-7730-ff8e62f61869" /* TODO: change me */,,\n        name: "My dApp",\n        publicKey: "6c7870aa1e42477fd7c2baaf4763bd826971e470772f71a0a388c1763de3ea1e" /* TODO: change me */,\n        relayServer: "beacon-node-1.sky.papers.tech" /* TODO: change me */,\n        version: "2" /* TODO: change me */\n    )\n\n    func substrateAccount(network: Substrate.Network) throws -> Substrate.Account {\n        try Substrate.Account(\n            publicKey: "f4c6095213a2f6d09464ed882b12d6024d20f7170c3b8bd5c1b071e4b00ced72" /* TODO: change me */,\n            address: "16XwWkdUqFXFY1tJNf1Q6fGgxQnGYUS6M95wPcrbp2sjjuoC" /* TODO: change me */,\n            network: network\n        )\n    }\n\n    func tezosAccount(network: Tezos.Network) throws -> Tezos.Account {\n        try Tezos.Network(\n            publicKey: "9ae0875d510904b0b15d251d8def1f5f3353e9799841c0ed6d7ac718f04459a0" /* TODO: change me */,\n            address: "tz1SkbBZg15BXPRkYCrSzhY6rq4tKGtpUSWv" /* TODO: change me */,\n            network: network\n        )\n    }\n\n    func run() {\n        createBeaconWallet { result in\n            guard case .success(_) = result else {\n                return\n            }\n\n            self.subscribeToRequests { result in\n                guard case .success(_) = result else {\n                    return\n                }\n\n                self.connectToDApp { result in\n                    guard case .success(_) = result else {\n                        return\n                    }\n                }\n            }\n        }\n    }\n\n    func createBeaconWallet(completion: @escaping (Result<(), Error>) -> ()) {\n        do {\n            // highlight-start\n            Beacon.WalletClient.create(\n                with: .init(\n                    name: "MyApp",\n                    blockchains: [Substrate.factory, Tezos.factory],\n                    connections: [try Transport.P2P.Matrix.connection()]\n                )\n            ) { result in\n            // highlight-end\n                switch result {\n                case let .success(client):\n                    self.beaconWallet = client\n                    completion(.success(()))\n                case let .failure(error):\n                    completion(.failure(error))\n                }\n            }\n        } catch {\n            completion(.failure(error))\n        }\n    }\n\n    func subscribeToRequests(completion: @escaping (Result<(), Error>) -> ()) {\n        // highlight-start\n        beaconWallet.connect { result in\n        // highlight-end\n            switch result {\n            case .success(_):\n                // highlight-start\n                self.beaconWallet.listen(onRequest: self.onSubstrateRequest)\n                self.beaconWallet.listen(onRequest: self.onTezosRequest)\n                // highlight-end\n                completion(.success(()))\n            case let .failure(error):\n                completion(.failure(error))\n            }\n        }\n    }\n\n    func connectToDApp(completion: @escaping (Result<(), Error>) -> ()) {\n        // highlight-start\n        beaconWallet.add([.p2p(dApp)]) { result in\n        // highlight-end\n            switch result {\n            case .success(_):\n                completion(.success(()))\n            case let .failure(error):\n                completion(.failure(error))\n            }\n        }\n    }\n\n    func onSubstrateRequest(_ request: Result<BeaconRequest<Substrate>, Beacon.Error>) {\n        do {\n            let request = try request.get()\n            let response = try response(from: request)\n\n            // highlight-start\n            beaconWallet.respond(with: response) { result in\n            // highlight-end\n                switch result {\n                case .success(_):\n                    print("Response sent")\n                case let .failure(error):\n                    print(error)\n                }\n            }\n        } catch {\n            print(error)\n        }\n    }\n\n    func response(from request: BeaconRequest<Substrate>) throws -> BeaconResponse<Substrate> {\n        // highlight-start\n        switch request {\n        case let .permission(content):\n            let accounts = try content.networks.map { try substrateAccount(network: $0) }\n            return .permission(PermissionSubstrateResponse(from: content, accounts: accounts))\n        case let .blockchain(blockchain):\n            return .error(ErrorBeaconResponse(from: blockchain, errorType: .aborted))\n        }\n        // highlight-end\n    }\n\n    func onTezosRequest(_ request: Result<BeaconRequest<Tezos>, Beacon.Error>) {\n        do {\n            let request = try request.get()\n            let response = try response(from: request)\n\n            // highlight-start\n            beaconWallet.respond(with: response) { result in\n            // highlight-end\n                switch result {\n                case .success(_):\n                    print("Response sent")\n                case let .failure(error):\n                    print(error)\n                }\n            }\n        } catch {\n            print(error)\n        }\n    }\n\n    func response(from request: BeaconRequest<Tezos>) throws -> BeaconResponse<Tezos> {\n        // highlight-start\n        switch request {\n        case let .permission(content):\n            let account = try tezosAccount(network: content.network)\n            return .permission(PermissionTezosResponse(from: content, account: account))\n        case let .blockchain(blockchain):\n            return .error(ErrorBeaconResponse(from: blockchain, errorType: .aborted))\n        }\n        // highlight-end\n    }\n}\n')))}b.isMDXComponent=!0}}]);